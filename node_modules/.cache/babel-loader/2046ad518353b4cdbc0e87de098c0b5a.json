{"ast":null,"code":"var _jsxFileName = \"/home/zorica/\\u0420\\u0430\\u0434\\u043D\\u0430 \\u043F\\u043E\\u0432\\u0440\\u0448\\u0438\\u043D\\u0430/react/vezbanje/auth/src/store/auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: '',\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n}); //const calculateRemainingTime = (expirationTime)=>{\n//const currentTime = new Date().getTime();\n//const adjExpirationTime = new Date(expirationTime).getTime();\n//const remainingDuration = adjExpirationTime - currentTime;\n//return remainingDuration;\n//}\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem('token');\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token;\n\n  const logoutHandler = () => {\n    setToken(null);\n    localStorage.removeItem('token', token);\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem('token', token); //const remainingTime = calculateRemainingTime(expirationTime);\n\n    setTimeout(logoutHandler, 3600000);\n    console.log(expirationTime);\n  };\n\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 1\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/zorica/Радна површина/react/vezbanje/auth/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","removeItem","loginHandler","expirationTime","setItem","setTimeout","console","log","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AACxCC,EAAAA,KAAK,EAAE,EADiC;AAExCC,EAAAA,UAAU,EAAE,KAF4B;AAGxCC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHoB;AAIxCG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJwB,CAApB,CAApB,C,CAOA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC9C,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB;AACA,QAAM,CAACR,KAAD,EAAQS,QAAR,IAAoBZ,QAAQ,CAACS,YAAD,CAAlC;AAEA,QAAMI,cAAc,GAAG,CAAC,CAACV,KAAzB;;AAEA,QAAMW,aAAa,GAAG,MAAM;AAC5BF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB,EAAiCZ,KAAjC;AACC,GAHD;;AAKA,QAAMa,YAAY,GAAG,CAACb,KAAD,EAAQc,cAAR,KAA2B;AAChDL,IAAAA,QAAQ,CAACT,KAAD,CAAR;AACAO,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8Bf,KAA9B,EAFgD,CAGhD;;AACAgB,IAAAA,UAAU,CAACL,aAAD,EAAgB,OAAhB,CAAV;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ;AACC,GAND;;AAQA,QAAMK,YAAY,GAAG;AACrBnB,IAAAA,KAAK,EAAEA,KADc;AAErBC,IAAAA,UAAU,EAAES,cAFS;AAGrBR,IAAAA,KAAK,EAAEW,YAHc;AAIrBV,IAAAA,MAAM,EAAEQ;AAJa,GAArB;AAOA,sBACA,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEQ,YAA7B;AAAA,cACCd,KAAK,CAACe;AADP;AAAA;AAAA;AAAA;AAAA,UADA;AAKC,CA/BM;;GAAMhB,mB;;KAAAA,mB;AAiCb,eAAeN,WAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst AuthContext = React.createContext({\ntoken: '',\nisLoggedIn: false,\nlogin: (token) => {},\nlogout: () => {},\n});\n\n//const calculateRemainingTime = (expirationTime)=>{\n//const currentTime = new Date().getTime();\n//const adjExpirationTime = new Date(expirationTime).getTime();\n\n//const remainingDuration = adjExpirationTime - currentTime;\n//return remainingDuration;\n//}\n\nexport const AuthContextProvider = (props) => {\nconst initialToken = localStorage.getItem('token')\nconst [token, setToken] = useState(initialToken);\n\nconst userIsLoggedIn = !!token;\n\nconst logoutHandler = () => {\nsetToken(null);\nlocalStorage.removeItem('token', token);\n};\n\nconst loginHandler = (token, expirationTime) => {\nsetToken(token);\nlocalStorage.setItem('token', token);\n//const remainingTime = calculateRemainingTime(expirationTime);\nsetTimeout(logoutHandler, 3600000);\nconsole.log(expirationTime)\n};\n\nconst contextValue = {\ntoken: token,\nisLoggedIn: userIsLoggedIn,\nlogin: loginHandler,\nlogout: logoutHandler,\n};\n\nreturn (\n<AuthContext.Provider value={contextValue}>\n{props.children}\n</AuthContext.Provider>\n);\n};\n\nexport default AuthContext;"]},"metadata":{},"sourceType":"module"}